{"title":"Monad (functional programming)","summary":"In functional programming, a monad is a type that wraps another type and gives some form of quality to the underlying type. In addition to wrapping a type, monads define two functions: one to wrap a value in a monad, and another to compose together functions that output monads (these are known as monadic functions). General-purpose languages use monads to abstract away boilerplate code needed for common operations (such as dealing with undefined values or fallible functions). Functional languages use monads to turn complicated sequences of functions into succinct pipelines that abstract away control flow, and side-effects.[1][2]","image":"Multivalued_functions_with_List_monad.svg.png.webp","url":"Monad_(functional_programming)"}